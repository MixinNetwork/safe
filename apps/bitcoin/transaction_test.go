package bitcoin

import (
	"encoding/hex"
	"testing"

	"github.com/btcsuite/btcd/wire"
	"github.com/stretchr/testify/require"
)

func TestTransaction(t *testing.T) {
	require := require.New(t)
	pb, _ := hex.DecodeString("70736274ff0100a402000000016f934dc1d2393c04820e10141ce43c0ae46fa947c37476f1f8ce01c3cc5318180100000000ffffffff0310270000000000002200200d9f2feb04c9ffeb88025fd04ece1d73048d16840f8cb7ddfcabd754f77540a3d0d61c000000000022002070c3ec7f541da73d0eeb610b090b4d56d36dc8e6499b0a663fb34f224509dda50000000000000000126a108da610f6ee0b4666884c1c365ba8323f00000000095349474841534845532097965f513881cddb4d3547b4234f8379ce82045d4c2d1b493de00b071d5d98ff0001012be0fd1c000000000022002070c3ec7f541da73d0eeb610b090b4d56d36dc8e6499b0a663fb34f224509dda5220202bd2f73ffb81fda1a7b774be4e8ddcca9f776f7e5777f9c7fd246725ba034aa24473045022100f3e826bbfa0dfb8bf3e7739ef12ca74ff399026919862b3206c8a5353df9070502200f5dfc0952f71c6846e432d423e7186df858bc8f8f610aec5ef674d284a210d1220203d277643292197684bde44376b94a9c91783ce3e424bf390ac99bc90f3df9be60463044022070371e4bd5e698e2d07e83aa6cbbf018753fa12a6dc7c2862e3e55b6cb0ab16702203bf07bb87efddf8d7ae395ac6e0d393f1d34a95fd7e13570caa51d1c9a667aa8010304810000000105782103d277643292197684bde44376b94a9c91783ce3e424bf390ac99bc90f3df9be60ac7c2102bd2f73ffb81fda1a7b774be4e8ddcca9f776f7e5777f9c7fd246725ba034aa24ac937c82926321036a864e0321a9e8b84ac16fbc7e47f2401218700e37575680f908b5683a6f29ffad02c006b2926893528700000000")
	psbt, err := UnmarshalPartiallySignedTransaction(pb)
	require.Nil(err)
	require.NotNil(psbt)
	require.Equal(pb, psbt.Marshal())

	signed := CheckTransactionPartiallySignedBy(hex.EncodeToString(pb), "03d277643292197684bde44376b94a9c91783ce3e424bf390ac99bc90f3df9be60")
	require.True(signed)
	signed = CheckTransactionPartiallySignedBy(hex.EncodeToString(pb), "02bd2f73ffb81fda1a7b774be4e8ddcca9f776f7e5777f9c7fd246725ba034aa24")
	require.True(signed)
	signed = CheckTransactionPartiallySignedBy(hex.EncodeToString(pb), "02bd2f73ffb81fda1a7b774be4e8ddcca9f776f7e5777f9c7fd246725ba034aa25")
	require.False(signed)

	msgTx, err := psbt.SignedTransaction("03d277643292197684bde44376b94a9c91783ce3e424bf390ac99bc90f3df9be60", "02bd2f73ffb81fda1a7b774be4e8ddcca9f776f7e5777f9c7fd246725ba034aa24")
	require.Nil(err)

	raw, _ := MarshalWiredTransaction(msgTx, wire.BaseEncoding, ChainBitcoin)
	require.Equal("02000000016f934dc1d2393c04820e10141ce43c0ae46fa947c37476f1f8ce01c3cc5318180100000000ffffffff0310270000000000002200200d9f2feb04c9ffeb88025fd04ece1d73048d16840f8cb7ddfcabd754f77540a3d0d61c000000000022002070c3ec7f541da73d0eeb610b090b4d56d36dc8e6499b0a663fb34f224509dda50000000000000000126a108da610f6ee0b4666884c1c365ba8323f00000000", hex.EncodeToString(raw))
	raw, _ = MarshalWiredTransaction(msgTx, wire.WitnessEncoding, ChainBitcoin)
	require.Equal("020000000001016f934dc1d2393c04820e10141ce43c0ae46fa947c37476f1f8ce01c3cc5318180100000000ffffffff0310270000000000002200200d9f2feb04c9ffeb88025fd04ece1d73048d16840f8cb7ddfcabd754f77540a3d0d61c000000000022002070c3ec7f541da73d0eeb610b090b4d56d36dc8e6499b0a663fb34f224509dda50000000000000000126a108da610f6ee0b4666884c1c365ba8323f0400483045022100f3e826bbfa0dfb8bf3e7739ef12ca74ff399026919862b3206c8a5353df9070502200f5dfc0952f71c6846e432d423e7186df858bc8f8f610aec5ef674d284a210d181473044022070371e4bd5e698e2d07e83aa6cbbf018753fa12a6dc7c2862e3e55b6cb0ab16702203bf07bb87efddf8d7ae395ac6e0d393f1d34a95fd7e13570caa51d1c9a667aa881782103d277643292197684bde44376b94a9c91783ce3e424bf390ac99bc90f3df9be60ac7c2102bd2f73ffb81fda1a7b774be4e8ddcca9f776f7e5777f9c7fd246725ba034aa24ac937c82926321036a864e0321a9e8b84ac16fbc7e47f2401218700e37575680f908b5683a6f29ffad02c006b2926893528700000000", hex.EncodeToString(raw))

	pb, _ = hex.DecodeString("70736274ff0100a402000000016daf0a2ca612879093698c5ab6dbcff372e893137d5dfda23615e1489f5e07210000000000ffffffff0310270000000000002200204a8f0888cc30695a20c71ae0d119f4c09743c0d03a7db52774d06c49a52d081a905f0100000000002200204a8f0888cc30695a20c71ae0d119f4c09743c0d03a7db52774d06c49a52d081a0000000000000000126a104525b641cc6e4ed1b2bb0713b786da6b000000000001007d0100000001a93da9d71875dac610ece59c07a6574211bba14adf01ecf6b601de93538b5f5f0000000000ffffffff02a0860100000000002200204a8f0888cc30695a20c71ae0d119f4c09743c0d03a7db52774d06c49a52d081a1dbd00000000000016001409eb71fab8358daa65e08d2e148568b83fe075880000000001012ba0860100000000002200204a8f0888cc30695a20c71ae0d119f4c09743c0d03a7db52774d06c49a52d081a22020208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fad47304402206c9adbfea684f9dca42700db018a6aaebbee1f679f553e871351031ccdbff3510220064eeed0c51e0a018b4c275e6585fd81d686c106be1708507a1bd4813affb7a881220203e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b3473045022100ab98516d06c3a32eae440d58d6a2cfca1a4e545a50d52f56926869916a028a2002203e65b54b64f1d4298d255e4368529291265274eaa9c2d712ee5e3474cf8ae83001030481000000010578210208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fadac7c2103e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b3ac937c8292632103c8f64e27a2f3ae961a57184841df19e7d8708ddbc998f0c5abc7197ead70931fad02b001b2926893528722060208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fad04f5c895ac220603c8f64e27a2f3ae961a57184841df19e7d8708ddbc998f0c5abc7197ead70931f04d3886f84220603e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b30483f05fb600010178210208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fadac7c2103e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b3ac937c8292632103c8f64e27a2f3ae961a57184841df19e7d8708ddbc998f0c5abc7197ead70931fad02b001b2926893528722020208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fad04f5c895ac220203c8f64e27a2f3ae961a57184841df19e7d8708ddbc998f0c5abc7197ead70931f04d3886f84220203e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b30483f05fb600010178210208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fadac7c2103e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b3ac937c8292632103c8f64e27a2f3ae961a57184841df19e7d8708ddbc998f0c5abc7197ead70931fad02b001b2926893528722020208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fad04f5c895ac220203c8f64e27a2f3ae961a57184841df19e7d8708ddbc998f0c5abc7197ead70931f04d3886f84220203e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b30483f05fb60000")
	psbt, err = UnmarshalPartiallySignedTransaction(pb)
	require.Nil(err)
	require.NotNil(psbt)

	signed = CheckTransactionPartiallySignedBy(hex.EncodeToString(pb), "0208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fad")
	require.True(signed)
	signed = CheckTransactionPartiallySignedBy(hex.EncodeToString(pb), "03e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b3")
	require.True(signed)
	signed = CheckTransactionPartiallySignedBy(hex.EncodeToString(pb), "03c8f64e27a2f3ae961a57184841df19e7d8708ddbc998f0c5abc7197ead70931f")
	require.False(signed)
	signed = CheckTransactionPartiallySignedBy(hex.EncodeToString(pb), "03d277643292197684bde44376b94a9c91783ce3e424bf390ac99bc90f3df9be60")
	require.False(signed)
	msgTx, _ = psbt.SignedTransaction("0208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fad", "03e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b3")
	raw, _ = MarshalWiredTransaction(msgTx, wire.WitnessEncoding, ChainBitcoin)
	require.Equal("020000000001016daf0a2ca612879093698c5ab6dbcff372e893137d5dfda23615e1489f5e07210000000000ffffffff0310270000000000002200204a8f0888cc30695a20c71ae0d119f4c09743c0d03a7db52774d06c49a52d081a905f0100000000002200204a8f0888cc30695a20c71ae0d119f4c09743c0d03a7db52774d06c49a52d081a0000000000000000126a104525b641cc6e4ed1b2bb0713b786da6b0400483045022100ab98516d06c3a32eae440d58d6a2cfca1a4e545a50d52f56926869916a028a2002203e65b54b64f1d4298d255e4368529291265274eaa9c2d712ee5e3474cf8ae8308147304402206c9adbfea684f9dca42700db018a6aaebbee1f679f553e871351031ccdbff3510220064eeed0c51e0a018b4c275e6585fd81d686c106be1708507a1bd4813affb7a88178210208134c3bb3263598db7f28cb631b34f81d34bfdf3cee163da7c41b6434e92fadac7c2103e17978200e8961fc87358898db7b0d5686aa4f14935d418de9b533d14922a4b3ac937c8292632103c8f64e27a2f3ae961a57184841df19e7d8708ddbc998f0c5abc7197ead70931fad02b001b2926893528700000000", hex.EncodeToString(raw))
}
