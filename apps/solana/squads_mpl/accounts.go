// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_mpl

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Ms struct {
	Threshold            uint16
	AuthorityIndex       uint16
	TransactionIndex     uint32
	MsChangeIndex        uint32
	Bump                 uint8
	CreateKey            ag_solanago.PublicKey
	AllowExternalExecute bool
	Keys                 []ag_solanago.PublicKey
}

var MsDiscriminator = [8]byte{70, 118, 9, 108, 254, 215, 31, 120}

func (obj Ms) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Threshold` param:
	err = encoder.Encode(obj.Threshold)
	if err != nil {
		return err
	}
	// Serialize `AuthorityIndex` param:
	err = encoder.Encode(obj.AuthorityIndex)
	if err != nil {
		return err
	}
	// Serialize `TransactionIndex` param:
	err = encoder.Encode(obj.TransactionIndex)
	if err != nil {
		return err
	}
	// Serialize `MsChangeIndex` param:
	err = encoder.Encode(obj.MsChangeIndex)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `CreateKey` param:
	err = encoder.Encode(obj.CreateKey)
	if err != nil {
		return err
	}
	// Serialize `AllowExternalExecute` param:
	err = encoder.Encode(obj.AllowExternalExecute)
	if err != nil {
		return err
	}
	// Serialize `Keys` param:
	err = encoder.Encode(obj.Keys)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Ms) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[70 118 9 108 254 215 31 120]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Threshold`:
	err = decoder.Decode(&obj.Threshold)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityIndex`:
	err = decoder.Decode(&obj.AuthorityIndex)
	if err != nil {
		return err
	}
	// Deserialize `TransactionIndex`:
	err = decoder.Decode(&obj.TransactionIndex)
	if err != nil {
		return err
	}
	// Deserialize `MsChangeIndex`:
	err = decoder.Decode(&obj.MsChangeIndex)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `CreateKey`:
	err = decoder.Decode(&obj.CreateKey)
	if err != nil {
		return err
	}
	// Deserialize `AllowExternalExecute`:
	err = decoder.Decode(&obj.AllowExternalExecute)
	if err != nil {
		return err
	}
	// Deserialize `Keys`:
	err = decoder.Decode(&obj.Keys)
	if err != nil {
		return err
	}
	return nil
}

type MsTransaction struct {
	Creator          ag_solanago.PublicKey
	Ms               ag_solanago.PublicKey
	TransactionIndex uint32
	AuthorityIndex   uint32
	AuthorityBump    uint8
	Status           MsTransactionStatus
	InstructionIndex uint8
	Bump             uint8
	Approved         []ag_solanago.PublicKey
	Rejected         []ag_solanago.PublicKey
	Cancelled        []ag_solanago.PublicKey
	ExecutedIndex    uint8
}

var MsTransactionDiscriminator = [8]byte{182, 151, 104, 216, 255, 1, 19, 157}

func (obj MsTransaction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MsTransactionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Creator` param:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return err
	}
	// Serialize `Ms` param:
	err = encoder.Encode(obj.Ms)
	if err != nil {
		return err
	}
	// Serialize `TransactionIndex` param:
	err = encoder.Encode(obj.TransactionIndex)
	if err != nil {
		return err
	}
	// Serialize `AuthorityIndex` param:
	err = encoder.Encode(obj.AuthorityIndex)
	if err != nil {
		return err
	}
	// Serialize `AuthorityBump` param:
	err = encoder.Encode(obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `InstructionIndex` param:
	err = encoder.Encode(obj.InstructionIndex)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Approved` param:
	err = encoder.Encode(obj.Approved)
	if err != nil {
		return err
	}
	// Serialize `Rejected` param:
	err = encoder.Encode(obj.Rejected)
	if err != nil {
		return err
	}
	// Serialize `Cancelled` param:
	err = encoder.Encode(obj.Cancelled)
	if err != nil {
		return err
	}
	// Serialize `ExecutedIndex` param:
	err = encoder.Encode(obj.ExecutedIndex)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MsTransaction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MsTransactionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[182 151 104 216 255 1 19 157]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return err
	}
	// Deserialize `Ms`:
	err = decoder.Decode(&obj.Ms)
	if err != nil {
		return err
	}
	// Deserialize `TransactionIndex`:
	err = decoder.Decode(&obj.TransactionIndex)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityIndex`:
	err = decoder.Decode(&obj.AuthorityIndex)
	if err != nil {
		return err
	}
	// Deserialize `AuthorityBump`:
	err = decoder.Decode(&obj.AuthorityBump)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `InstructionIndex`:
	err = decoder.Decode(&obj.InstructionIndex)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Approved`:
	err = decoder.Decode(&obj.Approved)
	if err != nil {
		return err
	}
	// Deserialize `Rejected`:
	err = decoder.Decode(&obj.Rejected)
	if err != nil {
		return err
	}
	// Deserialize `Cancelled`:
	err = decoder.Decode(&obj.Cancelled)
	if err != nil {
		return err
	}
	// Deserialize `ExecutedIndex`:
	err = decoder.Decode(&obj.ExecutedIndex)
	if err != nil {
		return err
	}
	return nil
}

type MsInstruction struct {
	ProgramId        ag_solanago.PublicKey
	Keys             []MsAccountMeta
	Data             []byte
	InstructionIndex uint8
	Bump             uint8
	Executed         bool
}

var MsInstructionDiscriminator = [8]byte{238, 185, 126, 149, 189, 89, 255, 92}

func (obj MsInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MsInstructionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `ProgramId` param:
	err = encoder.Encode(obj.ProgramId)
	if err != nil {
		return err
	}
	// Serialize `Keys` param:
	err = encoder.Encode(obj.Keys)
	if err != nil {
		return err
	}
	// Serialize `Data` param:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return err
	}
	// Serialize `InstructionIndex` param:
	err = encoder.Encode(obj.InstructionIndex)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Executed` param:
	err = encoder.Encode(obj.Executed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MsInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MsInstructionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[238 185 126 149 189 89 255 92]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `ProgramId`:
	err = decoder.Decode(&obj.ProgramId)
	if err != nil {
		return err
	}
	// Deserialize `Keys`:
	err = decoder.Decode(&obj.Keys)
	if err != nil {
		return err
	}
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return err
	}
	// Deserialize `InstructionIndex`:
	err = decoder.Decode(&obj.InstructionIndex)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Executed`:
	err = decoder.Decode(&obj.Executed)
	if err != nil {
		return err
	}
	return nil
}
