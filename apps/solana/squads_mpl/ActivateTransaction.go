// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_mpl

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Instruction to set the state of a transaction "active".
// "active" transactions can then be signed off by multisig members
type ActivateTransaction struct {

	// [0] = [] multisig
	//
	// [1] = [WRITE] transaction
	//
	// [2] = [WRITE, SIGNER] creator
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewActivateTransactionInstructionBuilder creates a new `ActivateTransaction` instruction builder.
func NewActivateTransactionInstructionBuilder() *ActivateTransaction {
	nd := &ActivateTransaction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetMultisigAccount sets the "multisig" account.
func (inst *ActivateTransaction) SetMultisigAccount(multisig ag_solanago.PublicKey) *ActivateTransaction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig)
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *ActivateTransaction) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTransactionAccount sets the "transaction" account.
func (inst *ActivateTransaction) SetTransactionAccount(transaction ag_solanago.PublicKey) *ActivateTransaction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(transaction).WRITE()
	return inst
}

// GetTransactionAccount gets the "transaction" account.
func (inst *ActivateTransaction) GetTransactionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetCreatorAccount sets the "creator" account.
func (inst *ActivateTransaction) SetCreatorAccount(creator ag_solanago.PublicKey) *ActivateTransaction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *ActivateTransaction) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst ActivateTransaction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ActivateTransaction,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ActivateTransaction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ActivateTransaction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Transaction is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Creator is not set")
		}
	}
	return nil
}

func (inst *ActivateTransaction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ActivateTransaction")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("transaction", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("    creator", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj ActivateTransaction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ActivateTransaction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewActivateTransactionInstruction declares a new ActivateTransaction instruction with the provided parameters and accounts.
func NewActivateTransactionInstruction(
	// Accounts:
	multisig ag_solanago.PublicKey,
	transaction ag_solanago.PublicKey,
	creator ag_solanago.PublicKey) *ActivateTransaction {
	return NewActivateTransactionInstructionBuilder().
		SetMultisigAccount(multisig).
		SetTransactionAccount(transaction).
		SetCreatorAccount(creator)
}
