// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_mpl

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Creates a new multisig account
type Create struct {
	Threshold *uint16
	CreateKey *ag_solanago.PublicKey
	Members   *[]ag_solanago.PublicKey
	Meta      *string

	// [0] = [WRITE] multisig
	//
	// [1] = [WRITE, SIGNER] creator
	//
	// [2] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateInstructionBuilder creates a new `Create` instruction builder.
func NewCreateInstructionBuilder() *Create {
	nd := &Create{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 3),
	}
	return nd
}

// SetThreshold sets the "threshold" parameter.
func (inst *Create) SetThreshold(threshold uint16) *Create {
	inst.Threshold = &threshold
	return inst
}

// SetCreateKey sets the "createKey" parameter.
func (inst *Create) SetCreateKey(createKey ag_solanago.PublicKey) *Create {
	inst.CreateKey = &createKey
	return inst
}

// SetMembers sets the "members" parameter.
func (inst *Create) SetMembers(members []ag_solanago.PublicKey) *Create {
	inst.Members = &members
	return inst
}

// SetMeta sets the "meta" parameter.
func (inst *Create) SetMeta(meta string) *Create {
	inst.Meta = &meta
	return inst
}

// SetMultisigAccount sets the "multisig" account.
func (inst *Create) SetMultisigAccount(multisig ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig).WRITE()
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *Create) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetCreatorAccount sets the "creator" account.
func (inst *Create) SetCreatorAccount(creator ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(creator).WRITE().SIGNER()
	return inst
}

// GetCreatorAccount gets the "creator" account.
func (inst *Create) GetCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Create) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Create {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Create) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

func (inst Create) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Create,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Create) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Create) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Threshold == nil {
			return errors.New("Threshold parameter is not set")
		}
		if inst.CreateKey == nil {
			return errors.New("CreateKey parameter is not set")
		}
		if inst.Members == nil {
			return errors.New("Members parameter is not set")
		}
		if inst.Meta == nil {
			return errors.New("Meta parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Creator is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Create) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Create")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=4]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Threshold", *inst.Threshold))
						paramsBranch.Child(ag_format.Param("CreateKey", *inst.CreateKey))
						paramsBranch.Child(ag_format.Param("  Members", *inst.Members))
						paramsBranch.Child(ag_format.Param("     Meta", *inst.Meta))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=3]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("      creator", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice.Get(2)))
					})
				})
		})
}

func (obj Create) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Threshold` param:
	err = encoder.Encode(obj.Threshold)
	if err != nil {
		return err
	}
	// Serialize `CreateKey` param:
	err = encoder.Encode(obj.CreateKey)
	if err != nil {
		return err
	}
	// Serialize `Members` param:
	err = encoder.Encode(obj.Members)
	if err != nil {
		return err
	}
	// Serialize `Meta` param:
	err = encoder.Encode(obj.Meta)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Create) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Threshold`:
	err = decoder.Decode(&obj.Threshold)
	if err != nil {
		return err
	}
	// Deserialize `CreateKey`:
	err = decoder.Decode(&obj.CreateKey)
	if err != nil {
		return err
	}
	// Deserialize `Members`:
	err = decoder.Decode(&obj.Members)
	if err != nil {
		return err
	}
	// Deserialize `Meta`:
	err = decoder.Decode(&obj.Meta)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateInstruction declares a new Create instruction with the provided parameters and accounts.
func NewCreateInstruction(
	// Parameters:
	threshold uint16,
	createKey ag_solanago.PublicKey,
	members []ag_solanago.PublicKey,
	meta string,
	// Accounts:
	multisig ag_solanago.PublicKey,
	creator ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Create {
	return NewCreateInstructionBuilder().
		SetThreshold(threshold).
		SetCreateKey(createKey).
		SetMembers(members).
		SetMeta(meta).
		SetMultisigAccount(multisig).
		SetCreatorAccount(creator).
		SetSystemProgramAccount(systemProgram)
}
