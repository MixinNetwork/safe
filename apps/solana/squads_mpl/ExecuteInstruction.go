// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_mpl

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Instruction to sequentially execute attached instructions.
// Instructions executed in this matter must be executed in order,
// this may be helpful for processing large batch transfers.
// This instruction can only be used for transactions with an authority
// index of 1 or greater.
//
// NOTE - do not use this instruction if there is not total clarity around
// potential side effects, as this instruction implies that the approved
// transaction will be executed partially, and potentially spread out over
// a period of time. This could introduce problems with state and failed
// transactions. For example: a program invoked in one of these instructions
// may be upgraded between executions and potentially leave one of the
// necessary accounts in an invalid state.
type ExecuteInstruction struct {

	// [0] = [WRITE] multisig
	//
	// [1] = [WRITE] transaction
	//
	// [2] = [WRITE] instruction
	//
	// [3] = [WRITE, SIGNER] member
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewExecuteInstructionInstructionBuilder creates a new `ExecuteInstruction` instruction builder.
func NewExecuteInstructionInstructionBuilder() *ExecuteInstruction {
	nd := &ExecuteInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetMultisigAccount sets the "multisig" account.
func (inst *ExecuteInstruction) SetMultisigAccount(multisig ag_solanago.PublicKey) *ExecuteInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig).WRITE()
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *ExecuteInstruction) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetTransactionAccount sets the "transaction" account.
func (inst *ExecuteInstruction) SetTransactionAccount(transaction ag_solanago.PublicKey) *ExecuteInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(transaction).WRITE()
	return inst
}

// GetTransactionAccount gets the "transaction" account.
func (inst *ExecuteInstruction) GetTransactionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetInstructionAccount sets the "instruction" account.
func (inst *ExecuteInstruction) SetInstructionAccount(instruction ag_solanago.PublicKey) *ExecuteInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(instruction).WRITE()
	return inst
}

// GetInstructionAccount gets the "instruction" account.
func (inst *ExecuteInstruction) GetInstructionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMemberAccount sets the "member" account.
func (inst *ExecuteInstruction) SetMemberAccount(member ag_solanago.PublicKey) *ExecuteInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(member).WRITE().SIGNER()
	return inst
}

// GetMemberAccount gets the "member" account.
func (inst *ExecuteInstruction) GetMemberAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst ExecuteInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ExecuteInstruction,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ExecuteInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ExecuteInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Transaction is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Instruction is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Member is not set")
		}
	}
	return nil
}

func (inst *ExecuteInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ExecuteInstruction")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("   multisig", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("transaction", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("instruction", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("     member", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj ExecuteInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *ExecuteInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewExecuteInstructionInstruction declares a new ExecuteInstruction instruction with the provided parameters and accounts.
func NewExecuteInstructionInstruction(
	// Accounts:
	multisig ag_solanago.PublicKey,
	transaction ag_solanago.PublicKey,
	instruction ag_solanago.PublicKey,
	member ag_solanago.PublicKey) *ExecuteInstruction {
	return NewExecuteInstructionInstructionBuilder().
		SetMultisigAccount(multisig).
		SetTransactionAccount(transaction).
		SetInstructionAccount(instruction).
		SetMemberAccount(member)
}
