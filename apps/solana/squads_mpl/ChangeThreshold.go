// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package squads_mpl

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// The instruction to change the threshold of the multisig
type ChangeThreshold struct {
	NewThreshold *uint16

	// [0] = [WRITE, SIGNER] multisig
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewChangeThresholdInstructionBuilder creates a new `ChangeThreshold` instruction builder.
func NewChangeThresholdInstructionBuilder() *ChangeThreshold {
	nd := &ChangeThreshold{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetNewThreshold sets the "newThreshold" parameter.
func (inst *ChangeThreshold) SetNewThreshold(newThreshold uint16) *ChangeThreshold {
	inst.NewThreshold = &newThreshold
	return inst
}

// SetMultisigAccount sets the "multisig" account.
func (inst *ChangeThreshold) SetMultisigAccount(multisig ag_solanago.PublicKey) *ChangeThreshold {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(multisig).WRITE().SIGNER()
	return inst
}

// GetMultisigAccount gets the "multisig" account.
func (inst *ChangeThreshold) GetMultisigAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

func (inst ChangeThreshold) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_ChangeThreshold,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst ChangeThreshold) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *ChangeThreshold) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.NewThreshold == nil {
			return errors.New("NewThreshold parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Multisig is not set")
		}
	}
	return nil
}

func (inst *ChangeThreshold) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("ChangeThreshold")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("NewThreshold", *inst.NewThreshold))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("multisig", inst.AccountMetaSlice.Get(0)))
					})
				})
		})
}

func (obj ChangeThreshold) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `NewThreshold` param:
	err = encoder.Encode(obj.NewThreshold)
	if err != nil {
		return err
	}
	return nil
}
func (obj *ChangeThreshold) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `NewThreshold`:
	err = decoder.Decode(&obj.NewThreshold)
	if err != nil {
		return err
	}
	return nil
}

// NewChangeThresholdInstruction declares a new ChangeThreshold instruction with the provided parameters and accounts.
func NewChangeThresholdInstruction(
	// Parameters:
	newThreshold uint16,
	// Accounts:
	multisig ag_solanago.PublicKey) *ChangeThreshold {
	return NewChangeThresholdInstructionBuilder().
		SetNewThreshold(newThreshold).
		SetMultisigAccount(multisig)
}
